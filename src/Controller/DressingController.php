<?php

namespace App\Controller;

use App\Entity\Color;
use App\Entity\Vetement;
use App\Repository\VetementRepository;
use App\Entity\User;
use App\Repository\ColorRepository;
use App\Repository\UserRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use App\Form\VetementFormType;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class DressingController extends AbstractController
{   
    #[Route('/dressing', name: 'app_dressing')]
    public function index(): Response
    {
        return $this->render('dressing/index.html.twig');
    }

    #[Route('/style/{type}', name: 'app_style')]
    //#[Route('/top', name: 'app_top')]
    public function top($type, VetementRepository $vetementRepository): JsonResponse
    {
        // Request to get the user clothes depending on the type (top or bottom)
        $typeVetements = $vetementRepository->findByType($type);
        
        // Depending on the type to displayed in the user dressing, sending the data to the requesting JavaScript file (switchDressing.js)
        if($type == "Haut"){
            $typeVetements = ['Tee-shirt', 'Sweat-shirt', 'Maille', 'Chemise', 'Gilet', 'Veste'];
        } else if($type == "Bas"){
            $typeVetements = ['Pantalon', 'Jean', 'Chino', 'Short', 'Jogging'];
        }

        return new JsonResponse(['typeVetements' => $typeVetements]);
    }

    #[Route('/list-vetements/{type}/{style}', name: 'app_list-vetements')]
    //#[Route('/bottom', name: 'app_bottom')]
    public function bottom($type, $style, VetementRepository $vetementRepository, UserRepository $userRepository, ColorRepository $colorRepository): JsonResponse
    {   
        // Recover the logged user id
        $users = $this->getUser()->getId();
        //dd($users);
        
        // Recovering the corresponding clothes by type chosen by the user in the dressing using a custom request

        // dd($style);

        if($style == "Tout"){
            $listeVetements = $vetementRepository->findDressingContent($users, $type);
        } else {
            $listeVetements = $vetementRepository->filterDressingContent($users, $type, $style);
        }
        //dd($listeVetements);

        // Creation of an empty tab which will store the requested user clothes
        $tab = [];

        // Loop on each clothes objects generated by the request to store them in the tab
        foreach($listeVetements as $row){

            // Creation of empty tabs to store the colors and colors name got by the request
            $color = [];
            $colorName = [];

            // Loop on each clothes objects generated by the request to store the colors and colors name in the corresponding tabs. This should be done as a loop because each clothes can own many colors. The management of a second or more colors will be included in the V2 of the project
            foreach($row->getColor() as $rowColor){
                $color[] = $rowColor->getColorCode();
                $colorName[] = $rowColor->getName();
            }

            // Inserting all the value in the tab for Json treatment reason, sending the data to the requesting JavaScript file (switchDressing.js)
            array_push($tab, array(
                'id' => $row->getId(),
                'type' => $row->getType(),
                'style' => $row->getStyle(),
                'image' => $row->getImage(),
                'color' => $color,
                'colorName' => $colorName,
                'alt' => $row->getAlt(),
                'userName' => $row->getUser()->getFirstname()));
        }

        return new JsonResponse(json_encode(['listeVetements' =>$tab]));
    }

    #[Route('/delete/{type}/{id}', name: 'app_delete')]
    //#[Route('/top', name: 'app_top')]
    public function delete($type, $id, VetementRepository $vetementRepository): Response
    {
        // Request to get the user clothes depending on the type (top or bottom)
        $deleteVetement = $vetementRepository->findOneById($id);

        // Retreiving the corresponding image name
        $fichier = 'assets/user_img/'.$deleteVetement->getImage();

        //dd($fichier);

        // Deleting the cloth selected
        $vetementRepository->remove($deleteVetement, true);

        //dd($deleteVetement);

        // Controlling if the file is existing
        if(file_exists ($fichier)){
            //dd('ok');
            unlink( $fichier) ;
        }
        
        return new Response;
    }
} 

